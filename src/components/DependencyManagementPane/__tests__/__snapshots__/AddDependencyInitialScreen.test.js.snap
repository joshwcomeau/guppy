// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddDependencyInitialScreen component should render instruction paragraphs 1`] = `
Array [
  .c0 {
  font-size: 1.25rem;
  margin-bottom: 1.5rem;
  font-size: 1.4rem;
  color: #666666;
}

<Styled(styled.div)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  font-size: 1.25rem;
  margin-bottom: 1.5rem;
",
              "
  font-size: 1.4rem;
  color: ",
              "#666666",
              ";
",
            ],
          },
          "displayName": "Styled(styled.div)",
          "foldedComponentIds": Array [
            "sc-bdVaJa",
          ],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        You can use the input above to search the Node Package Manager (NPM) registry for packages that have been published.
      </div>
    </StyledComponent>
  </Styled(styled.div)>,
  .c0 {
  font-size: 1.25rem;
  margin-bottom: 1.5rem;
  font-size: 1.4rem;
  color: #666666;
}

<Styled(styled.div)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  font-size: 1.25rem;
  margin-bottom: 1.5rem;
",
              "
  font-size: 1.4rem;
  color: ",
              "#666666",
              ";
",
            ],
          },
          "displayName": "Styled(styled.div)",
          "foldedComponentIds": Array [
            "sc-bdVaJa",
          ],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        Search by package name, description, keyword, or author.
      </div>
    </StyledComponent>
  </Styled(styled.div)>,
]
`;

exports[`AddDependencyInitialScreen component should render powered by Algolia link 1`] = `
.c1 {
  position: relative;
  -webkit-text-decoration: none;
  text-decoration: none;
  color: #304FFE;
}

.c1:hover {
  color: #3f6cff;
}

.c0 {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 25px;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  text-align: center;
  color: #666666;
}

<styled.div>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-ifAKCX",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  position: absolute;
  left: 0;
  right: 0;
  bottom: 25px;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-ifAKCX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <ExternalLink
        color="#304FFE"
        display="inline-block"
        hoverColor="#3f6cff"
        href="https://www.algolia.com/?utm_source=guppy&utm_medium=website&utm_content=localhost&utm_campaign=poweredby"
      >
        <styled.a
          color="#304FFE"
          hoverColor="#3f6cff"
          href="https://www.algolia.com/?utm_source=guppy&utm_medium=website&utm_content=localhost&utm_campaign=poweredby"
          onClick={[Function]}
          style={
            Object {
              "display": "inline-block",
            }
          }
        >
          <StyledComponent
            color="#304FFE"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: relative;
  text-decoration: none;
  color: ",
                    [Function],
                    ";

  &:hover {
    color: ",
                    [Function],
                    ";
  }
",
                  ],
                },
                "displayName": "styled.a",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hoverColor="#3f6cff"
            href="https://www.algolia.com/?utm_source=guppy&utm_medium=website&utm_content=localhost&utm_campaign=poweredby"
            onClick={[Function]}
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <a
              className="c1"
              color="#304FFE"
              href="https://www.algolia.com/?utm_source=guppy&utm_medium=website&utm_content=localhost&utm_campaign=poweredby"
              onClick={[Function]}
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-EHOje",
                        "isStatic": true,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: ",
                          "#666666",
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-EHOje",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c2"
                  >
                    <svg />
                  </div>
                </StyledComponent>
              </styled.div>
            </a>
          </StyledComponent>
        </styled.a>
      </ExternalLink>
    </div>
  </StyledComponent>
</styled.div>
`;
