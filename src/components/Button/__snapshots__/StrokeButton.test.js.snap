// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StrokeButton component should render background (active) 1`] = `
.c0 {
  position: absolute;
  z-index: 0;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  border-radius: 100px;
  background: linear-gradient(25deg,#651fff,#D500F9);
  opacity: 1;
  -webkit-transition: opacity 350ms;
  transition: opacity 350ms;
}

<styled.div
  colors={
    Array [
      "#651fff",
      "#D500F9",
    ]
  }
  isActive={true}
  isVisible={true}
>
  <StyledComponent
    colors={
      Array [
        "#651fff",
        "#D500F9",
      ]
    }
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  position: absolute;
  z-index: 0;
  top: ",
            [Function],
            "px;
  left: ",
            [Function],
            "px;
  right: ",
            [Function],
            "px;
  bottom: ",
            [Function],
            "px;
  border-radius: 100px;
  background: linear-gradient(25deg, ",
            [Function],
            ");
  opacity: ",
            [Function],
            ";
  transition: opacity 350ms;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isActive={true}
    isVisible={true}
  >
    <div
      className="c0"
    />
  </StyledComponent>
</styled.div>
`;

exports[`StrokeButton component should render background (inactive) 1`] = `
.c0 {
  position: absolute;
  z-index: 0;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0px;
  border-radius: 100px;
  background: linear-gradient(25deg,#651fff,#D500F9);
  opacity: 1;
  -webkit-transition: opacity 350ms;
  transition: opacity 350ms;
}

<styled.div
  colors={
    Array [
      "#651fff",
      "#D500F9",
    ]
  }
  isActive={false}
  isVisible={true}
>
  <StyledComponent
    colors={
      Array [
        "#651fff",
        "#D500F9",
      ]
    }
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  position: absolute;
  z-index: 0;
  top: ",
            [Function],
            "px;
  left: ",
            [Function],
            "px;
  right: ",
            [Function],
            "px;
  bottom: ",
            [Function],
            "px;
  border-radius: 100px;
  background: linear-gradient(25deg, ",
            [Function],
            ");
  opacity: ",
            [Function],
            ";
  transition: opacity 350ms;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isActive={false}
    isVisible={true}
  >
    <div
      className="c0"
    />
  </StyledComponent>
</styled.div>
`;

exports[`StrokeButton component should render foreground (active) 1`] = `
.c1 {
  position: relative;
  border: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background: #FFF;
  color: #111111;
  cursor: pointer;
  outline: none;
  white-space: nowrap;
  padding: 0px 20px;
  height: 38px;
  border-radius: 19px;
  font-size: 16px;
}

.c1:disabled {
  -webkit-filter: grayscale(100%);
  filter: grayscale(100%);
  opacity: 0.75;
  cursor: initial;
}

.c1:not(:disabled):active {
  -webkit-transform-origin: center center;
  -ms-transform-origin: center center;
  transform-origin: center center;
}

.c0 {
  display: block;
  position: relative;
  z-index: 1;
}

<styled.span>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: block;
  position: relative;
  z-index: 1;
",
          ],
        },
        "displayName": "styled.span",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0"
    >
      <ButtonBase
        background="#FFF"
        size="medium"
        textColor="#111111"
      >
        <Styled(styled.button)
          background="#FFF"
          textColor="#111111"
        >
          <StyledComponent
            background="#FFF"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: relative;
  border: 0;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  background: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  cursor: pointer;
  outline: none;
  white-space: nowrap;

  &:hover {
    background: ",
                    [Function],
                    ";
  }

  &:disabled {
    filter: grayscale(100%);
    opacity: 0.75;
    cursor: initial;
  }

  &:not(:disabled):active {
    transform-origin: center center;
    transform: ",
                    [Function],
                    ";
  }
",
                    "
  padding: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  border-radius: 19px;
  font-size: 16px;
",
                  ],
                },
                "displayName": "Styled(styled.button)",
                "foldedComponentIds": Array [
                  "sc-bdVaJa",
                ],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            textColor="#111111"
          >
            <button
              className="c1"
            >
              <span
                style={
                  Object {
                    "display": "block",
                  }
                }
              />
            </button>
          </StyledComponent>
        </Styled(styled.button)>
      </ButtonBase>
    </span>
  </StyledComponent>
</styled.span>
`;

exports[`StrokeButton component should render foreground (inactive) 1`] = `
.c1 {
  position: relative;
  border: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background: #FFF;
  color: #111111;
  cursor: pointer;
  outline: none;
  white-space: nowrap;
  padding: 0px 20px;
  height: 38px;
  border-radius: 19px;
  font-size: 16px;
}

.c1:disabled {
  -webkit-filter: grayscale(100%);
  filter: grayscale(100%);
  opacity: 0.75;
  cursor: initial;
}

.c1:not(:disabled):active {
  -webkit-transform-origin: center center;
  -ms-transform-origin: center center;
  transform-origin: center center;
}

.c0 {
  display: block;
  position: relative;
  z-index: 1;
}

<styled.span>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: block;
  position: relative;
  z-index: 1;
",
          ],
        },
        "displayName": "styled.span",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0"
    >
      <ButtonBase
        background="#FFF"
        size="medium"
        textColor="#111111"
      >
        <Styled(styled.button)
          background="#FFF"
          textColor="#111111"
        >
          <StyledComponent
            background="#FFF"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: relative;
  border: 0;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  background: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  cursor: pointer;
  outline: none;
  white-space: nowrap;

  &:hover {
    background: ",
                    [Function],
                    ";
  }

  &:disabled {
    filter: grayscale(100%);
    opacity: 0.75;
    cursor: initial;
  }

  &:not(:disabled):active {
    transform-origin: center center;
    transform: ",
                    [Function],
                    ";
  }
",
                    "
  padding: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  border-radius: 19px;
  font-size: 16px;
",
                  ],
                },
                "displayName": "Styled(styled.button)",
                "foldedComponentIds": Array [
                  "sc-bdVaJa",
                ],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            textColor="#111111"
          >
            <button
              className="c1"
            >
              <span
                style={
                  Object {
                    "display": "block",
                  }
                }
              />
            </button>
          </StyledComponent>
        </Styled(styled.button)>
      </ButtonBase>
    </span>
  </StyledComponent>
</styled.span>
`;
