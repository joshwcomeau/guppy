// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BigClickableButton component should render pressed 1`] = `
.c0 {
  width: 64px;
  height: 64px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
  color: #FFF;
  font-size: 18px;
  border: none;
  background: linear-gradient(45deg,#651fff,#304FFE);
  outline: none;
}

<styled.button
  background="linear-gradient(45deg, #651fff, #304FFE)"
  height={64}
  onMouseDown={[Function]}
  onMouseLeave={[Function]}
  onMouseUp={[Function]}
  width={64}
>
  <StyledComponent
    background="linear-gradient(45deg, #651fff, #304FFE)"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  width: ",
            [Function],
            "px;
  height: ",
            [Function],
            "px;
  display: flex;
  align-items: center;
  justify-content: space-around;
  color: ",
            "#FFF",
            ";
  font-size: 18px;

  border: none;
  background: ",
            [Function],
            ";
  outline: none; /* TODO: Better a11y story :/ */
",
          ],
        },
        "displayName": "styled.button",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    height={64}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseUp={[Function]}
    width={64}
  >
    <button
      className="c0"
      height={64}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      width={64}
    />
  </StyledComponent>
</styled.button>
`;

exports[`BigClickableButton component should render pressed 2`] = `
.c0 {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
}

<styled.div>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <styled.svg
        height={72}
        style={
          Object {
            "display": "block",
          }
        }
        width={72}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": true,
                "lastClassName": "cFlEyZ",
                "rules": Array [],
              },
              "displayName": "styled.svg",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": "svg",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height={72}
          style={
            Object {
              "display": "block",
            }
          }
          width={72}
        >
          <svg
            className=""
            height={72}
            style={
              Object {
                "display": "block",
              }
            }
            width={72}
          >
            <path
              d="
                      M 0,64
                      L 64,64
                      L 72,72
                      L 6,72
                    "
              fill="rgb(63, 0, 200)"
            />
            <path
              d="
                      M 64,0
                      L 72,6
                      L 72,72
                      L 64, 64
                    "
              fill="rgb(1, 33, 210)"
            />
          </svg>
        </StyledComponent>
      </styled.svg>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`BigClickableButton component should render released 1`] = `
.c0 {
  width: 64px;
  height: 64px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
  color: #FFF;
  font-size: 18px;
  border: none;
  background: linear-gradient(45deg,#651fff,#304FFE);
  outline: none;
}

<styled.button
  background="linear-gradient(45deg, #651fff, #304FFE)"
  height={64}
  onMouseDown={[Function]}
  onMouseLeave={[Function]}
  onMouseUp={[Function]}
  width={64}
>
  <StyledComponent
    background="linear-gradient(45deg, #651fff, #304FFE)"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  width: ",
            [Function],
            "px;
  height: ",
            [Function],
            "px;
  display: flex;
  align-items: center;
  justify-content: space-around;
  color: ",
            "#FFF",
            ";
  font-size: 18px;

  border: none;
  background: ",
            [Function],
            ";
  outline: none; /* TODO: Better a11y story :/ */
",
          ],
        },
        "displayName": "styled.button",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    height={64}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseUp={[Function]}
    width={64}
  >
    <button
      className="c0"
      height={64}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      width={64}
    />
  </StyledComponent>
</styled.button>
`;

exports[`BigClickableButton component should render released 2`] = `
.c0 {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
}

<styled.div>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <styled.svg
        height={72}
        style={
          Object {
            "display": "block",
          }
        }
        width={72}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": true,
                "lastClassName": "cFlEyZ",
                "rules": Array [],
              },
              "displayName": "styled.svg",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": "svg",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height={72}
          style={
            Object {
              "display": "block",
            }
          }
          width={72}
        >
          <svg
            className=""
            height={72}
            style={
              Object {
                "display": "block",
              }
            }
            width={72}
          >
            <path
              d="
                      M 0,64
                      L 64,64
                      L 72,72
                      L 6,72
                    "
              fill="rgb(63, 0, 200)"
            />
            <path
              d="
                      M 64,0
                      L 72,6
                      L 72,72
                      L 64, 64
                    "
              fill="rgb(1, 33, 210)"
            />
          </svg>
        </StyledComponent>
      </styled.svg>
    </div>
  </StyledComponent>
</styled.div>
`;
